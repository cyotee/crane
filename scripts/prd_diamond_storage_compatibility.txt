# Product Requirements Document (PRD)
# Crane Framework: OpenZeppelin Compatibility Analysis and Implementation Plan

## 1. Executive Summary

This document outlines the requirements for analyzing and implementing Diamond Storage equivalents for OpenZeppelin contracts within the Crane Framework. The goal is to provide a nearly drop-in replacement for OpenZeppelin by offering Diamond Storage implementations, Facets, and Package deployments for all major OpenZeppelin components, while maintaining Crane's naming convention of prefixing implementations with "Better" to minimize adoption friction.

## 2. Project Objectives

- Create a comprehensive inventory of all OpenZeppelin contracts that require Diamond Storage implementations
- Document all state variables in each contract that need conversion to Diamond Storage patterns
- Develop a testing strategy for existing and new implementations
- Prioritize implementations based on utility and dependencies
- Define requirements for creating OpenZeppelin-equivalent Packages
- Create a roadmap for bringing Crane to feature parity with OpenZeppelin

## 3. Current State Analysis

### 3.1 Existing Crane Implementations

- ERC20, ERC20Permit, and ERC4626 partial implementations exist
- ConstProdUtils and CamelotV2Service libraries are implemented
- Basic testing infrastructure (Fixtures, Stubs) is in place
- Diamond Storage pattern is established but not consistently applied
- Package deployment system exists but needs expansion

### 3.2 Current Gaps

- Many OpenZeppelin contracts lack Diamond Storage implementations
- Testing coverage is incomplete, especially for libraries
- Documentation for migration from OpenZeppelin to Crane is minimal
- Not all OpenZeppelin constructor options have Package equivalents
- Consistent Diamond Storage patterns across all components is lacking

## 4. Requirements for Analysis Phase

### 4.1 OpenZeppelin Contract Inventory

Create a complete inventory of OpenZeppelin contracts, organized by category:

1. **Token Standards**
   - ERC20 and extensions (Burnable, Capped, Pausable, Snapshot, etc.)
   - ERC721 and extensions
   - ERC777
   - ERC1155
   - ERC4626 and variations

2. **Access Control**
   - Ownable
   - AccessControl and extensions
   - Roles (various predefined roles)

3. **Security**
   - Pausable
   - ReentrancyGuard
   - PullPayment

4. **Utilities**
   - Address
   - Arrays
   - Counters
   - Strings
   - Math libraries

5. **Governance**
   - Governor and extensions
   - TimelockController

6. **Proxies**
   - Transparent, UUPS, Beacon proxies
   - Proxy initialization patterns

### 4.2 State Variable Analysis

For each OpenZeppelin contract:

- Document all state variables
- Identify storage patterns (mappings, arrays, complex structures)
- Analyze inheritance chains and storage overlaps
- Document visibility requirements
- Identify potential storage collision risks

### 4.3 Testing Strategy Documentation

- Define unit testing approaches for libraries without stubs
- Document integration testing requirements for facets
- Specify package deployment testing needs
- Define cross-chain testing requirements where applicable
- Outline behavior testing patterns for each contract type

## 5. Implementation Requirements

### 5.1 Diamond Storage Implementation Guidelines

- Document standard pattern for converting state variables to Diamond Storage
- Create template for "BetterX" naming convention and storage layouts
- Define standard for storage slot calculation to prevent collisions
- Establish naming conventions for storage contracts, layouts, and repos

### 5.2 Prioritized Implementation Order

1. **First Priority Tier**
   - Complete ERC20 ecosystem (all extensions and variants)
   - ERC721 base implementation
   - AccessControl and Ownable patterns
   - Security primitives (Pausable, ReentrancyGuard)

2. **Second Priority Tier**
   - ERC721 extensions
   - ERC1155 implementation
   - Governance primitives
   - Utility libraries

3. **Third Priority Tier**
   - ERC777
   - Advanced Governance
   - Specialized extensions

### 5.3 Package Requirements

For each implementation:

- Define standard package configurations
- Map OpenZeppelin constructor arguments to initialization patterns
- Document composition patterns for extension combinations
- Specify initialization sequence requirements

### 5.4 Testing Requirements

- Unit tests for all Diamond Storage patterns
- Integration tests for all facets
- Package deployment and initialization tests
- Cross-contract interaction tests
- Edge case and security testing

## 6. Compatibility and Migration Strategy

- Document direct replacements (OpenZeppelin â†’ Crane)
- Provide migration guides for complex contracts
- Develop compatibility layers where needed
- Create adapter patterns for mixed deployments

## 7. Documentation Requirements

- Diamond Storage pattern explanations
- Package deployment guides
- API compatibility documentation
- Test coverage reports

## 8. Specific Implementation Requirements

### 8.1 ERC20 Ecosystem

Complete Diamond Storage implementations for:

- ERC20
- ERC20Burnable
- ERC20Capped
- ERC20Pausable
- ERC20Snapshot
- ERC20Votes
- ERC20Wrapper
- ERC20FlashMint
- ERC20Permit

### 8.2 ERC721 Ecosystem

Complete Diamond Storage implementations for:

- ERC721
- ERC721Enumerable
- ERC721URIStorage
- ERC721Burnable
- ERC721Pausable
- ERC721Votes
- ERC721Royalty

### 8.3 Access Control

Complete Diamond Storage implementations for:

- Ownable
- AccessControl
- AccessControlEnumerable
- AccessControlDefaultAdminRules

### 8.4 Security Primitives

Complete Diamond Storage implementations for:

- Pausable
- ReentrancyGuard
- PullPayment
- VestingWallet

### 8.5 Utility Libraries

Testing and completion of:

- ConstProdUtils
- CamelotV2Service
- Math libraries
- Address utilities

## 9. Deliverables

1. Complete inventory spreadsheet of OpenZeppelin contracts
2. State variable analysis document for each contract
3. Diamond Storage implementation specifications
4. Test requirement documentation
5. Package configuration specifications
6. Prioritized implementation roadmap
7. Migration guides for OpenZeppelin users

## 10. Success Criteria

- 100% of core OpenZeppelin contracts have Diamond Storage equivalents
- All implementations pass comprehensive test suites
- Package deployments match all OpenZeppelin constructor configurations
- Documentation provides clear migration paths
- Performance benchmarks show acceptable overhead compared to OpenZeppelin

## Next Steps

This PRD will be broken down into specific tasks for both analysis and implementation phases, with the analysis phase focused on completing a detailed inventory and requirements documentation before proceeding to implementation PRDs for specific contract categories. 